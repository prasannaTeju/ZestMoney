package com.live.util;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.base.Function;


public class WebdriverUtils {

	
	public static WebElement waitForElementPresenet(WebDriver driver,WebElement locater)
	{
		WebElement element= (new WebDriverWait(driver, 60)).until(ExpectedConditions.visibilityOf(locater));
		return element;
	}
	
	public static void waitTillObjectDisappears(WebDriver driver,String elementText)
	{
	 (new WebDriverWait(driver, 60)).until(ExpectedConditions.invisibilityOfElementLocated(By.id(elementText)));
		
	}
	
	public static WebElement fluentWait(WebDriver driver, final String value)
	{
		Wait<WebDriver> wait=new FluentWait<WebDriver>(driver)
				.withTimeout(120, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(NoSuchElementException.class);
		WebElement fluentElement=wait.until(new Function<WebDriver, WebElement>() 
		{
			public WebElement apply(WebDriver driver) 
			{
				driver.navigate().refresh();
				return driver.findElement(By.xpath(value));
			}
			
		});
		return fluentElement;
	}
	
	public static WebElement scrollToElement(WebDriver driver, WebElement element)
	{
		JavascriptExecutor js= (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView(true);", element);
		return element;
	}
	
	public static void javaScriptClick(WebDriver driver, WebElement element)
	{
		JavascriptExecutor js= (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", element);
	}
	
	public static String captureScreenshot(WebDriver driver) throws IOException
	{
		File screenshot= ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
		String path=System.getProperty("user.dir")+"\\screenShots\\"+driver.getTitle()+".png";
		FileUtils.copyFile(screenshot, new File(path));
		return path;
	}
	public static String randomNumber()
	{
		Random ran = new Random(System.currentTimeMillis());
		int x = (((1+ran.nextInt(2)) * 10000 + ran.nextInt(10000)));
		return Integer.toString(x);
	}
	
	public static String getFormatedDateTime(){
		SimpleDateFormat sd = new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_SSS");
		return sd.format(new Date());
	}
	
	public static void waitForPageToLoad(WebDriver driver){
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}
	
	public void navigateToPage(WebDriver driver,String url){
				driver.navigate().to(url);
				
			}
	
	public static void selectRating(WebDriver driver, WebElement element, int numbeofStars)
	{
		Actions a = new Actions(driver);
		int bubbleRatingX= element.getLocation().getX();			
		int bubbleRatingY= element.getLocation().getY();			
		int bubbleWidth = element.getSize().getWidth();	
		int endX =(bubbleRatingX * (numbeofStars));
		a.moveToElement(element).moveByOffset(bubbleRatingX, bubbleRatingY).pause(2000).moveByOffset(endX, bubbleRatingY).click().build().perform();
	}
	
	public static void selectDropdown(WebDriver driver, WebElement element, String dropdownValue)
	{
		Select s =new Select((element));	
		s.selectByValue(dropdownValue);
	}
}
